rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.email == 'admin@finishit.app' ||
        request.auth.token.email == 'davidcao00@hotmail.com' || // Your admin email
        request.auth.token.admin == true
      );
    }
    
    // Users collection - users can read/write their own data, read others for social features
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAuthenticated(); // Allow reading other users for social features
      allow read, write: if isAdmin(); // Admin can access all users
    }
    
    // Tasks collection - users can only access their own tasks
    match /tasks/{taskId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow read, write: if isAdmin(); // Admin can access all tasks
    }
    
    // Posts collection - public read, owner write
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow read, write: if isAdmin(); // Admin can access all posts
    }
    
    // Comments collection - public read, authenticated write
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow read, write: if isAdmin(); // Admin can access all comments
    }
    
    // Achievements collection - users can only access their own achievements
    match /achievements/{achievementId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow read, write: if isAdmin(); // Admin can access all achievements
    }
    
    // Time tracking collection - users can only access their own data
    match /timeTracking/{trackingId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow read, write: if isAdmin(); // Admin can access all time tracking
    }
    
    // Leaderboards collection - public read only
    match /leaderboards/{leaderboardId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(); // Admin can update leaderboards
    }
    
    // Notifications collection - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow read, write: if isAdmin(); // Admin can access all notifications
    }
    
    // Categories collection - read public, write own custom ones, admin can do everything
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        (resource.data.isDefault == true || 
         resource.data.userId == request.auth.uid);
      allow read, write: if isAdmin(); // Admin can create default categories and manage all
    }
    
    // Tags collection - read public, write own custom ones, admin can do everything
    match /tags/{tagId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        (request.resource.data.userId == request.auth.uid ||
         request.resource.data.userId == null);
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == null || 
         resource.data.userId == request.auth.uid);
      allow read, write: if isAdmin(); // Admin can create default tags and manage all
    }
    
    // Achievement templates - admin can create and manage
    match /achievementTemplates/{templateId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin(); // Only admin can create templates
    }
    
    // User likes collection - authenticated users can manage their own likes
    match /userLikes/{likeId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow read, write: if isAdmin(); // Admin can access all likes
    }
    
    // User follows collection - authenticated users can manage their own follows
    match /userFollows/{followId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.followerId || 
         request.auth.uid == resource.data.followingId);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.followerId;
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.followerId;
      allow read, write: if isAdmin(); // Admin can access all follows
    }
    
    // Post media collection - public read, owner write
    match /postMedia/{mediaId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      allow read, write: if isAdmin(); // Admin can access all media
    }
    
    // Subtasks collection - users can only access subtasks of their own tasks
    match /subtasks/{subtaskId} {
      allow read, write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/tasks/$(resource.data.taskId)) &&
        get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)) &&
        get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.userId == request.auth.uid;
      allow read, write: if isAdmin(); // Admin can access all subtasks
    }
    
    // Task tags junction collection - users can only manage tags for their own tasks
    match /taskTags/{taskTagId} {
      allow read, write: if isAuthenticated() && 
        exists(/databases/$(database)/documents/tasks/$(resource.data.taskId)) &&
        get(/databases/$(database)/documents/tasks/$(resource.data.taskId)).data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
        exists(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)) &&
        get(/databases/$(database)/documents/tasks/$(request.resource.data.taskId)).data.userId == request.auth.uid;
      allow read, write: if isAdmin(); // Admin can access all task tags
    }
  }
}
